
declare global.number[0] with network priority local
declare global.number[1] with network priority local
declare global.number[2] with network priority low
declare global.number[3] with network priority low
declare global.number[4] with network priority low = -1
declare global.number[5] with network priority low = -1
declare global.number[6] with network priority low = -1
declare global.number[7] with network priority low = -1
declare global.number[8] with network priority low = -1
declare global.number[9] with network priority low
declare global.number[10] with network priority low = -1
declare global.number[11] with network priority high
declare global.object[0] with network priority low
declare global.object[1] with network priority low
declare global.object[2] with network priority low
declare global.object[3] with network priority low
declare global.object[4] with network priority low
declare global.object[5] with network priority low
declare global.object[6] with network priority low
declare global.object[7] with network priority low
declare global.object[8] with network priority low
declare global.object[9] with network priority low
declare global.object[10] with network priority low
declare global.object[11] with network priority low
declare global.object[12] with network priority low
declare global.object[13] with network priority low
declare global.object[14] with network priority local
declare global.object[15] with network priority low
declare global.player[0] with network priority low
declare global.player[1] with network priority low
declare global.team[0] with network priority low
declare global.team[1] with network priority low
declare global.team[2] with network priority low
declare global.team[3] with network priority low
declare global.team[4] with network priority low
declare global.team[5] with network priority low
declare global.team[6] with network priority low
declare global.team[7] with network priority low
declare global.timer[0] = 300
declare player.number[0] with network priority high
declare player.number[1] with network priority low
declare player.number[2] with network priority low
declare player.number[3] with network priority high
declare player.object[0] with network priority high
declare player.object[1] with network priority high
declare player.object[2] with network priority high
declare player.object[3] with network priority high
declare player.team[0] with network priority low
declare player.timer[0] = 1
declare object.number[0] with network priority low
declare object.number[1] with network priority low
declare object.number[2] with network priority low
declare object.number[3] with network priority low
declare object.number[4] with network priority low
declare object.number[5] with network priority low
declare object.number[6] with network priority low
declare object.number[7] with network priority low
declare object.object[0] with network priority low
declare object.object[1] with network priority low
declare object.object[2] with network priority low
declare object.object[3] with network priority low
declare object.timer[3] = 1

function trigger_0()for each object with label "scale" do
      current_object.number[5] = 9960
      current_object.number[1] = current_object.spawn_sequence
      if global.object[3].number[6] == 0 then 
         if current_object.spawn_sequence < -10 then 
            current_object.number[1] += 101
            current_object.number[1] *= 2
            if current_object.spawn_sequence > -71 then 
               current_object.number[1] *= 2
               if current_object.spawn_sequence > -41 then 
                  current_object.number[1] *= 3
                  current_object.number[1] /= 2
               end
            end
         end
         current_object.number[1] *= 10
         current_object.number[1] += 100
         if current_object.spawn_sequence < -10 then 
            current_object.number[1] += 1000
            if current_object.spawn_sequence > -71 then 
               current_object.number[1] += -600
               if current_object.spawn_sequence > -41 then 
                  current_object.number[1] += -1200
               end
            end
         end
         if current_object.spawn_sequence == -10 then 
            current_object.number[1] = 1
         end
      end
      if global.object[3].number[6] == 1 then 
         current_object.number[1] *= 10
         if current_object.spawn_sequence < -10 then 
            current_object.number[1] *= -2
            if current_object.spawn_sequence > -81 then 
               current_object.number[1] += 800
            end
         end
         if current_object.spawn_sequence < -80 then 
            current_object.number[1] *= 2
            current_object.number[1] += -800
         end
         current_object.number[1] += 100
         if current_object.spawn_sequence == -10 then 
            current_object.number[1] = 1
         end
      end
      if global.object[3].number[6] == -1 then 
         current_object.number[1] *= 10
         if current_object.spawn_sequence < -10 then 
            current_object.number[1] *= -4
            if current_object.spawn_sequence > -81 then 
               current_object.number[1] += 600
            end
         end
         if current_object.spawn_sequence < -80 then 
            current_object.number[1] *= 4
            current_object.number[1] -= 9000
         end
         current_object.number[1] += 100
         if current_object.spawn_sequence == -10 then 
            current_object.number[1] = 1
         end
      end
      if not current_object.is_of_type(hill_marker) then 
         if current_object.team != team[5] then 
            if global.number[5] == -1 then 
               current_object.set_scale(current_object.number[1])
               if current_object.number[1] < 50 and current_object.object[2] == no_object then 
                  current_object.object[2] = current_object.place_at_me(hill_marker, none, never_garbage_collect, 0, 0, 0, none)
                  current_object.object[2].set_scale(100)
                  current_object.object[2].copy_rotation_from(current_object, true)
                  current_object.object[2].attach_to(current_object, 0, 0, 0, relative)
               end
               if current_object.number[1] > 50 then 
                  current_object.object[2].delete()
               end
            end
            if global.number[5] == 1 then 
               current_object.set_scale(100)
            end
         end
         if current_object.team == team[5] then 
            if global.number[5] == 1 then 
               current_object.set_scale(current_object.number[1])
               if current_object.number[1] < 50 and current_object.object[2] == no_object then 
                  current_object.object[2] = current_object.place_at_me(hill_marker, none, never_garbage_collect, 0, 0, 0, none)
                  current_object.object[2].set_scale(100)
                  current_object.object[2].copy_rotation_from(current_object, true)
                  current_object.object[2].attach_to(current_object, 0, 0, 0, relative)
               end
               if current_object.number[1] > 50 then 
                  current_object.object[2].delete()
               end
            end
            if global.number[5] == -1 then 
               current_object.set_scale(100)
            end
         end
         current_object.copy_rotation_from(current_object, false)
         if current_object.team == team[2] or current_object.team == team[3] then 
            if current_object.number[0] == 239 then 
               current_object.object[0].copy_rotation_from(current_object, true)
               current_object.attach_to(current_object.object[0], 0, 0, 0, relative)
               current_object.number[0] = 0
            end
            if current_object.number[0] == 238 then 
               current_object.object[0].detach()
               current_object.number[0] = 239
            end
            if current_object.object[0] == no_object then 
               if current_object.team == team[2] then 
                  current_object.object[0] = current_object.place_at_me(heavy_barrier, none, never_garbage_collect, 0, 0, 0, none)
                  if current_object.object[0] == no_object then 
                     current_object.object[0] = current_object.place_at_me(warthog_turret, none, never_garbage_collect, 0, 0, 0, none)
                  end
               end
               if current_object.team == team[3] then 
                  current_object.object[0] = current_object.place_at_me(monitor, none, never_garbage_collect, 0, 0, 0, none)
               end
               current_object.object[0].set_invincibility(1)
               current_object.object[0].set_scale(50)
               current_object.object[0].attach_to(current_object, 0, 0, 0, relative)
               current_object.number[0] = 238
            end
            if global.number[10] == 1 then 
               current_object.detach()
               current_object.object[0].attach_to(current_object, 0, 0, 0, relative)
               current_object.number[0] = 240
            end
            if global.number[10] == -1 and current_object.number[0] == 240 then 
               current_object.number[0] = 238
            end
            if current_object.timer[3].is_zero() then 
               current_object.object[0].detach()
               current_object.attach_to(current_object.object[0], 0, 0, 0, relative)
               current_object.timer[3].reset()
            end
         end
         if current_object.team != team[2] and current_object.object[0].is_of_type(warthog_turret) or current_object.object[0].is_of_type(heavy_barrier) then 
            current_object.detach()
            current_object.object[0].delete()
         end
         if current_object.team != team[3] and current_object.object[0].is_of_type(monitor) then 
            current_object.detach()
            current_object.object[0].delete()
         end
      end
      if current_object.is_of_type(hill_marker) then 
         current_object.set_shape_visibility(everyone)
         if current_object.team == team[7] or current_object.team == team[5] then 
            current_object.number[1] = current_object.spawn_sequence
            if current_object.spawn_sequence == 0 then 
               current_object.number[1] = 100
            end
            if current_object.spawn_sequence < 0 then 
               current_object.number[1] *= -1
               current_object.number[1] += 100
            end
         end
         global.object[15] = current_object
         for each object do
            if global.object[15].team == current_object.team or global.object[15].team == neutral_team or global.object[15].team == team[5] or global.object[15].team == team[6] or global.object[15].team == team[7] and global.object[15].shape_contains(current_object) and global.object[15] != current_object then 
               current_object.set_scale(global.object[15].number[1])
               current_object.copy_rotation_from(current_object, false)
               if global.object[15].number[1] < 50 then 
                  current_object.number[7] = 8888
               end
               if global.object[15].number[1] >= 50 and current_object.number[7] == 8888 then 
                  current_object.number[7] = 0
               end
            end
         end
      end
   end
end

function frontlines_tools()
   for each object do
      current_object.set_waypoint_visibility(no_one)
   end
   alias temp_number = global.number[2]
   for each object with label "killzone" do
      current_object.set_shape_visibility(everyone)
      current_object.set_waypoint_visibility(everyone)
      current_object.set_waypoint_icon(skull)
      temp_number = current_object.spawn_sequence
      current_object.set_waypoint_text("%n", temp_number)
      current_object.set_waypoint_priority(normal)
   end
   for each object with label "frontline" do
      current_object.set_waypoint_visibility(everyone)
      current_object.set_waypoint_icon(arrow)
      temp_number = current_object.spawn_sequence
      current_object.set_waypoint_text("%n", temp_number)
      current_object.set_waypoint_priority(normal)
   end
end

on init: do
   for each object do
      if global.object[0] == no_object then 
         global.object[0] = current_object
      end
   end
   if global.object[3] == no_object then 
      global.object[3] = global.object[0].place_at_me(flag_stand, "toolbarlabel", never_garbage_collect, 0, 0, 127, none)
      global.object[12] = global.object[3].place_at_me(monitor, "spawner", never_garbage_collect, 0, 0, 0, none)
      global.object[3].attach_to(global.object[12], 0, 0, 0, absolute)
      global.object[3].detach()
      global.object[12].attach_to(global.object[3], 0, 0, 127, absolute)
      global.object[12].detach()
      global.object[3].attach_to(global.object[12], 0, 0, 0, absolute)
      global.object[3].detach()
      global.object[12].attach_to(global.object[3], 0, 0, 127, absolute)
      global.object[12].detach()
      global.object[3].attach_to(global.object[12], 0, 0, 0, absolute)
      global.object[3].detach()
      global.object[12].attach_to(global.object[3], 0, 0, 127, absolute)
      global.object[12].detach()
      global.object[3].attach_to(global.object[12], 0, 0, 0, absolute)
      global.object[3].detach()
      global.object[12].attach_to(global.object[3], 0, 0, 127, absolute)
      global.object[12].detach()
      global.object[3].attach_to(global.object[12], 0, 0, 0, absolute)
      global.object[3].detach()
      global.object[12].attach_to(global.object[3], 0, 0, 127, absolute)
      global.object[12].detach()
      global.object[3].attach_to(global.object[12], 0, 0, 0, absolute)
      global.object[3].detach()
      global.object[12].attach_to(global.object[3], 0, 0, 100, absolute)
      global.object[12].detach()
      global.object[3].attach_to(global.object[12], 0, 0, 0, absolute)
      global.object[3].detach()
      global.object[12].attach_to(global.object[3], 0, 0, 0, absolute)
      global.object[12].detach()
      global.object[3].object[0] = global.object[12].place_at_me(kill_ball, "toolbarlabel", never_garbage_collect, 0, 0, 0, none)
      global.object[3].object[0].attach_to(global.object[12], 0, 0, 0, relative)
      global.object[3].object[2] = global.object[3].place_at_me(monitor, "toolbarlabel", never_garbage_collect, 0, 0, -127, none)
      global.object[3].object[3] = global.object[3].object[2].place_at_me(kill_ball, "toolbarlabel", never_garbage_collect, 0, 0, 0, none)
      global.object[3].object[3].attach_to(global.object[3].object[2], 0, 0, 0, relative)
   end
   if global.object[3].object[0] == no_object and global.object[3].object[3] == no_object then 
      global.object[3].object[0] = global.object[12].place_at_me(landmine, "toolbarlabel", never_garbage_collect, 0, 0, 3, none)
      global.object[3].object[0].attach_to(global.object[12], 0, 0, 2, relative)
      global.object[3].object[0].detach()
      global.object[3].object[3] = global.object[3].object[2].place_at_me(landmine, "toolbarlabel", never_garbage_collect, 0, 0, 3, none)
      global.object[3].object[3].attach_to(global.object[3].object[2], 0, 0, 2, relative)
      global.object[3].object[3].detach()
   end
   game.show_message_to(all_players, none, "Enable scripts by destroying a UNSC machine gun turret!")
   game.show_message_to(all_players, none, "The Anvil Server's Official Forge Tool! V1.05b")
   game.show_message_to(all_players, none, "SvE AnvilEditor. Created by Weesee!")
   global.number[4] = -1
   global.number[5] = -1
   global.number[6] = -1
   global.number[7] = -1
   global.number[8] = -1
   global.number[10] = -1
   for each player do
      current_player.number[0] = -1
      current_player.biped.set_waypoint_visibility(everyone)
   end
end

on local init: do
   for each object with label "object_by_index" do
      global.number[0] = current_object.spawn_sequence
      global.number[0] += 100
      global.object[14] = no_object
      global.number[1] = 0
      for each object do
         if not current_object.has_forge_label("toolbarlabel") and not current_object.has_forge_label("spawner") and not current_object.is_of_type(monitor) and not current_object.is_of_type(flag_stand) and not current_object.is_of_type(kill_ball) and not current_object.is_of_type(elite) and not current_object.is_of_type(spartan) and not current_object.is_of_type(landmine) and not current_object.is_of_type(hill_marker) and not current_object.is_of_type(capture_plate) then 
            if global.number[1] == global.number[0] then 
               global.object[14] = current_object
            end
            global.number[1] += 1
         end
      end
      if current_object.spawn_sequence != 0 then 
         if current_object.number[1] != current_object.spawn_sequence then 
            global.object[14].copy_rotation_from(current_object, true)
            global.object[14].attach_to(current_object, 0, 0, 0, relative)
            current_object.number[1] = current_object.spawn_sequence
         end
         if current_object.team == team[0] then 
            if global.number[8] == -1 then 
               global.object[14].detach()
            end
            if global.number[8] == 1 then 
               global.object[14].copy_rotation_from(current_object, true)
               global.object[14].attach_to(current_object, 0, 0, 0, relative)
            end
         end
         if current_object.team != team[0] then 
            global.object[14].copy_rotation_from(current_object, true)
            global.object[14].attach_to(current_object, 0, 0, 0, relative)
         end
      end
   end
   trigger_0()
   frontlines_tools()
end

on object death: do
   for each player do
      if current_player.team[0] == no_team then 
         current_player.team[0] = current_player.team
      end
      if current_player.team[0] != current_player.team then 
         if current_player.number[3] == 3 then 
            global.number[11] -= 1
            current_player.number[3] = 0
            current_player.object[0].delete()
         end
         current_player.team[0] = current_player.team
      end
      if current_player.biped == killed_object then 
         if current_player.biped.is_of_type(monitor) and current_player.number[0] == 1 or current_player.team == team[7] or current_player.team == team[6] then 
            current_player.object[2] = killed_object.place_at_me(monitor, none, never_garbage_collect, 0, 0, 0, none)
            current_player.object[2].set_invincibility(1)
            current_player.set_biped(current_player.object[2])
         end
         if not current_player.biped.is_of_type(monitor) then 
            killed_object.delete()
         end
      end
      if current_player.number[3] == 2 then 
         for each object do
            if current_object.number[7] == 8888 then 
               current_object.set_waypoint_icon(diamond)
               current_object.set_waypoint_visibility(mod_player, current_player, 1)
            end
         end
      end
      if current_player.number[3] != 2 then 
         for each object do
            if current_object.number[7] == 8888 then 
               current_object.set_waypoint_visibility(mod_player, current_player, 0)
            end
         end
      end
   end
   for each object do
      if not current_object.is_of_type(spartan) and not current_object.is_of_type(elite) and not current_object.is_of_type(monitor) then 
         if current_object.team == team[7] then 
            current_object.set_invincibility(1)
         end
         if current_object.team != team[7] then 
            current_object.set_invincibility(0)
         end
      end
   end
   if killed_object.is_of_type(machine_gun_turret) and not killed_object.has_forge_label("toolbarlabel") then 
      global.object[12].delete()
      global.object[3].object[2].delete()
      global.object[3].object[0].delete()
      global.object[3].object[3].delete()
      global.object[3].object[0].delete()
      global.object[3].object[3].delete()
      global.object[3].delete()
      global.object[3] = killed_object.place_at_me(flag_stand, "toolbarlabel", never_garbage_collect, 0, 0, 127, none)
      global.object[3].object[2] = killed_object.place_at_me(monitor, "toolbarlabel", never_garbage_collect, 0, 0, 40, none)
      global.object[12] = global.object[3].place_at_me(monitor, "spawner", never_garbage_collect, 0, 0, 127, none)
      global.object[3].object[0] = global.object[12].place_at_me(kill_ball, "toolbarlabel", never_garbage_collect, 0, 0, 0, none)
      global.object[3].object[0].attach_to(global.object[12], 0, 0, 0, relative)
      global.object[3].object[3] = global.object[3].object[2].place_at_me(kill_ball, "toolbarlabel", never_garbage_collect, 0, 0, 0, none)
      global.object[3].object[3].attach_to(global.object[3].object[2], 0, 0, 0, relative)
      if global.object[3].object[0] == no_object then 
         global.object[3].object[0] = global.object[12].place_at_me(landmine, "toolbarlabel", never_garbage_collect, 0, 0, 3, none)
         global.object[3].object[0].attach_to(global.object[12], 0, 0, 2, relative)
         global.object[3].object[0].detach()
      end
      if global.object[3].object[3] == no_object then 
         global.object[3].object[3] = global.object[3].object[2].place_at_me(landmine, "toolbarlabel", never_garbage_collect, 0, 0, 3, none)
         global.object[3].object[3].attach_to(global.object[3].object[2], 0, 0, 2, relative)
         global.object[3].object[3].detach()
      end
   end
   if killed_object.is_of_type(monitor) and killed_object.has_forge_label("toolbarlabel") or killed_object.has_forge_label("spawner") and global.object[3] != no_object then 
      if global.object[3].number[1] != 85 then 
         game.show_message_to(all_players, announce_vip, "Scripts enabled! Disable scripts by destroying a plasma cannon!")
         game.play_sound_for(all_players, announce_vip_new, false)
         global.object[3].number[1] = 85
      end
      if killed_object.has_forge_label("spawner") then 
         global.object[12] = global.object[3].place_at_me(monitor, "spawner", never_garbage_collect, 0, 0, 127, none)
         global.object[3].attach_to(global.object[12], 0, 0, -10, relative)
         global.object[3].detach()
         global.object[3].object[0] = global.object[12].place_at_me(kill_ball, "spawner", never_garbage_collect, 0, 0, -3, none)
         global.object[3].object[0].attach_to(global.object[12], 0, 0, -3, absolute)
         global.object[3].object[2].attach_to(global.object[3], 0, 0, -127, relative)
         global.object[3].object[2].detach()
         if global.object[3].object[3].is_of_type(landmine) then 
            global.object[3].object[3].attach_to(global.object[3].object[2], 0, 0, 2, relative)
            global.object[3].object[3].detach()
         end
      end
      if killed_object.has_forge_label("toolbarlabel") then 
         global.object[3].object[2] = global.object[3].place_at_me(monitor, "toolbarlabel", never_garbage_collect, 0, 0, -127, none)
         global.object[3].object[3] = global.object[3].object[2].place_at_me(kill_ball, "toolbarlabel", never_garbage_collect, 0, 0, -3, none)
         global.object[3].object[3].attach_to(global.object[3].object[2], 0, 0, 0, absolute)
      end
      if global.object[3].object[0] == no_object then 
         global.object[3].object[0] = global.object[12].place_at_me(landmine, "toolbarlabel", never_garbage_collect, 0, 0, 3, none)
         global.object[3].object[0].attach_to(global.object[12], 0, 0, 2, relative)
         global.object[3].object[0].detach()
      end
      if global.object[3].object[3] == no_object then 
         global.object[3].object[3] = global.object[3].object[2].place_at_me(landmine, "toolbarlabel", never_garbage_collect, 0, 0, 3, none)
         global.object[3].object[3].attach_to(global.object[3].object[2], 0, 0, 2, relative)
         global.object[3].object[3].detach()
      end
      if global.timer[0] == 300 then 
         global.timer[0].set_rate(-100%)
      end
      if global.timer[0] == 0 then 
         game.show_message_to(all_players, none, "Disable scripts by destroying a plasma cannon")
         global.timer[0].reset()
      end
      trigger_0()
      frontlines_tools()
      for each object with label "attach_base" do
         if current_object.spawn_sequence != 0 then 
            global.object[0] = no_object
            global.object[0] = current_object
            global.number[3] = current_object.spawn_sequence
            global.number[3] *= -1
            for each object with label "attachment" do
               if global.number[7] == -1 then 
                  current_object.number[2] = current_object.spawn_sequence
                  if global.object[0].spawn_sequence == current_object.spawn_sequence or global.number[3] == current_object.spawn_sequence and current_object.number[3] == 0 then 
                     if current_object.spawn_sequence < 0 and current_object.number[3] == 0 then 
                        global.object[2] = current_object
                        for each object do
                           global.number[2] = current_object.get_distance_to(global.object[2])
                           global.player[1] = current_object.try_get_carrier()
                           if global.number[2] == 0 and global.player[1] == no_player and global.object[2] != current_object and not current_object.is_of_type(spartan) and not current_object.is_of_type(elite) then 
                              current_object.detach()
                              current_object.attach_to(global.object[0], 0, 0, 5, relative)
                              if current_object.is_of_type(warthog_turret_rocket) or current_object.is_of_type(warthog_turret_gauss) or current_object.is_of_type(warthog_turret) or current_object.is_of_type(shade_gun_plasma) then 
                                 current_object.object[0] = current_object.place_at_me(flag_stand, none, none, 0, 0, 0, none)
                                 current_object.object[0].set_scale(1)
                                 current_object.detach()
                                 current_object.attach_to(current_object.object[0], 0, 0, 0, relative)
                                 current_object.object[0].attach_to(global.object[0], 0, 0, 5, relative)
                                 global.object[0].object[0] = current_object
                                 current_object.object[0].set_shape(box, 5, 5, 10, 0)
                              end
                           end
                        end
                        current_object.attach_to(global.object[0], 0, 0, 0, relative)
                        current_object.number[3] = 1
                        if current_object.spawn_sequence < -50 then 
                           current_object.set_scale(1)
                        end
                     end
                     if current_object.spawn_sequence > 74 and current_object.number[3] == 0 then 
                        global.object[2] = current_object.place_at_me(flag_stand, none, none, 0, 0, 0, troop)
                        global.object[2].set_scale(1)
                        global.object[2].attach_to(global.object[0], 0, 0, 0, relative)
                        current_object.attach_to(global.object[2], 0, 0, 0, relative)
                        current_object.number[3] = 1
                     end
                     if current_object.spawn_sequence > 0 then 
                        current_object.attach_to(global.object[0], 0, 0, 0, relative)
                        current_object.number[3] = 1
                     end
                  end
               end
               if global.number[7] == 1 then 
                  current_object.detach()
                  if current_object.spawn_sequence < -50 then 
                     current_object.set_scale(100)
                  end
                  current_object.number[3] = 0
               end
               if current_object.number[2] != current_object.spawn_sequence and current_object.number[3] == 1 then 
                  current_object.detach()
                  current_object.number[3] = 0
               end
            end
            for each object do
               if global.object[0].spawn_sequence < 0 then 
                  global.object[0].set_shape_visibility(everyone)
                  if global.object[0].team == current_object.team or global.object[0].team == neutral_team and global.object[0].shape_contains(current_object) and not current_object.is_of_type(spartan) and not current_object.is_of_type(elite) and not current_object.is_of_type(monitor) then 
                     current_object.attach_to(global.object[0], 0, 0, 0, relative)
                  end
               end
            end
         end
      end
      for each object do
         if not current_object.has_forge_label("attachment") and current_object.number[3] == 1 then 
            current_object.detach()
            current_object.number[3] = 0
         end
      end
      if global.number[11] < 0 then 
         global.number[11] = 0
      end
      for each player do
         if not current_player.biped.is_of_type(monitor) then 
            current_player.object[0] = current_player.biped
            if current_player.number[3] == 4 and current_player.timer[0] == 0 then 
               current_player.timer[0].reset()
               current_player.biped.detach()
               current_player.object[3].delete()
               current_player.object[0].set_waypoint_icon(none)
               current_player.number[3] = 1
            end
            if current_player.number[3] != 2 and current_player.number[3] != 4 then 
               if current_player.number[0] == -1 then 
                  current_player.object[0].set_invincibility(0)
               end
               current_player.number[3] = 1
            end
            if current_player.number[3] == 2 then 
               current_player.number[3] = 3
               current_player.object[1] = current_player.biped.place_at_me(monitor, none, never_garbage_collect, 0, 0, 10, none)
               current_player.object[0].set_waypoint_icon(crown)
               current_player.object[0].set_waypoint_visibility(everyone)
               current_player.object[1].remove_weapon(primary, true)
               current_player.object[1].add_weapon(dmr, force)
               current_player.object[1].add_weapon(needle_rifle, force)
               current_player.set_biped(current_player.object[1])
               current_player.apply_traits(script_traits[0])
               current_player.object[0].set_invincibility(1)
               game.show_message_to(current_player, timer_beep, "Toolbar Mode")
               global.number[11] += 1
            end
         end
         if current_player.biped.is_of_type(monitor) then 
            if current_player.number[3] == 1 then 
               current_player.number[3] = 2
               current_player.object[2] = current_player.biped
            end
            if current_player.number[3] == 3 then 
               current_player.object[0].set_invincibility(1)
               global.object[4] = no_object
               global.object[4] = no_object
               global.object[4] = current_player.try_get_weapon(primary)
               if global.object[4] == no_object then 
                  current_player.object[2] = current_player.biped
                  current_player.object[0].copy_rotation_from(current_player.object[2], false)
                  current_player.object[3] = current_player.biped.place_at_me(machine_gun_turret, "toolbarlabel", none, 0, 0, 0, none)
                  global.object[9] = current_player.object[3]
                  global.object[9].team = team[7]
                  current_player.object[3].set_invincibility(1)
                  current_player.object[3].copy_rotation_from(current_player.biped, false)
                  current_player.set_biped(current_player.object[0])
                  current_player.force_into_vehicle(current_player.object[3])
                  current_player.object[2].delete()
                  current_player.object[1].delete()
                  current_player.timer[0] = 1
                  current_player.timer[0].set_rate(-300%)
                  current_player.number[3] = 4
                  global.number[11] -= 1
                  current_player.object[0].set_waypoint_visibility(no_one)
               end
               if global.object[5] == no_object then 
                  global.object[5] = current_player.biped.place_at_me(flag_stand, "toolbarlabel", never_garbage_collect, 30, 0, 0, none)
                  global.object[5].set_scale(1)
                  global.object[7] = global.object[5].place_at_me(flag_stand, "toolbarlabel", never_garbage_collect, -5, -20, 0, none)
                  global.object[7].object[0] = global.object[5].place_at_me(flag_stand, "toolbarlabel", never_garbage_collect, 0, -10, 0, none)
                  global.object[7].object[1] = global.object[5].place_at_me(flag_stand, "toolbarlabel", never_garbage_collect, -10, -30, 0, none)
                  global.object[7].object[2] = global.object[5].place_at_me(flag_stand, "toolbarlabel", never_garbage_collect, 0, 10, 0, none)
                  global.object[7].object[3] = global.object[5].place_at_me(flag_stand, "toolbarlabel", never_garbage_collect, -5, 20, 0, none)
                  global.object[8] = global.object[5].place_at_me(flag_stand, "toolbarlabel", never_garbage_collect, -10, 30, 0, none)
                  global.object[8].object[0] = global.object[5].place_at_me(flag_stand, "toolbarlabel", never_garbage_collect, -15, 40, 0, none)
               end
               if global.object[5].object[0] == no_object then 
                  global.object[5].object[0] = global.object[5].place_at_me(spartan, "toolbarlabel", never_garbage_collect, -5, -20, 0, none)
                  global.object[5].object[0].set_waypoint_text("Bro-Spawn")
                  global.object[5].object[0].attach_to(global.object[7], 0, 0, 0, relative)
               end
               if global.object[5].object[1] == no_object then 
                  global.object[5].object[1] = global.object[5].place_at_me(spartan, "toolbarlabel", never_garbage_collect, 0, -10, 0, none)
                  global.object[5].object[1].set_waypoint_text("Invincibility")
                  global.object[5].object[1].attach_to(global.object[7].object[0], 0, 0, 0, relative)
               end
               if global.object[5].object[2] == no_object then 
                  global.object[5].object[2] = global.object[5].place_at_me(spartan, "toolbarlabel", never_garbage_collect, -10, -30, 0, none)
                  global.object[5].object[2].set_waypoint_text("Race Trigger")
                  global.object[5].object[2].attach_to(global.object[7].object[1], 0, 0, 0, relative)
               end
               if global.object[5].object[3] == no_object then 
                  global.object[5].object[3] = global.object[5].place_at_me(spartan, "toolbarlabel", never_garbage_collect, 0, 10, 0, none)
                  global.object[5].object[3].set_waypoint_text("Attach Switch")
                  global.object[5].object[3].attach_to(global.object[7].object[2], 0, 0, 0, relative)
               end
               if global.object[6] == no_object then 
                  global.object[6] = global.object[5].place_at_me(spartan, "toolbarlabel", never_garbage_collect, 0, 0, 0, none)
                  global.object[6].set_waypoint_text("Scale On/Off")
                  global.object[6].attach_to(global.object[5], 0, 0, 0, relative)
               end
               if global.object[6].object[0] == no_object then 
                  global.object[6].object[0] = global.object[5].place_at_me(spartan, "toolbarlabel", never_garbage_collect, -5, 20, 0, none)
                  global.object[6].object[0].set_waypoint_text("OBI-Attach")
                  global.object[6].object[0].attach_to(global.object[7].object[3], 0, 0, 0, relative)
               end
               if global.object[6].object[1] == no_object then 
                  global.object[6].object[1] = global.object[5].place_at_me(spartan, "toolbarlabel", never_garbage_collect, -10, 30, 0, none)
                  global.object[6].object[1].set_waypoint_text("Shadow Switch")
                  global.object[6].object[1].attach_to(global.object[8], 0, 0, 0, relative)
               end
               if global.object[8].object[1] == no_object then 
                  global.object[8].object[1] = global.object[5].place_at_me(spartan, "toolbarlabel", never_garbage_collect, -15, 40, 0, none)
                  global.object[8].object[1].set_waypoint_text("Scale Switch")
                  global.object[8].object[1].attach_to(global.object[8].object[0], 0, 0, 0, relative)
               end
               for each object do
                  if current_object.has_forge_label("toolbarlabel") then 
                     if current_object.is_of_type(spartan) then 
                        current_object.max_health = 1
                        current_object.max_shields = 0
                        current_object.set_waypoint_visibility(everyone)
                        current_object.remove_weapon(primary, true)
                        current_object.set_scale(200)
                     end
                     if current_object.is_of_type(flag_stand) then 
                        current_object.set_scale(1)
                     end
                  end
               end
            end
            if current_player.number[3] == 0 then 
               current_player.number[3] = 1
            end
         end
      end
      if global.number[11] == 0 then 
         global.object[5].object[0].delete()
         global.object[5].object[1].delete()
         global.object[5].object[2].delete()
         global.object[5].object[3].delete()
         global.object[5].delete()
         global.object[6].object[0].delete()
         global.object[6].object[1].delete()
         global.object[6].delete()
         global.object[7].object[3].delete()
         global.object[7].object[2].delete()
         global.object[7].object[1].delete()
         global.object[7].object[0].delete()
         global.object[7].delete()
         global.object[8].object[1].delete()
         global.object[8].object[0].delete()
         global.object[8].delete()
      end
   end
   if killer_player != no_player then 
      if global.object[5].object[0] == killed_object then 
         global.number[4] *= -1
         if global.number[4] == -1 then 
            game.show_message_to(all_players, timer_beep, "Bro-Spawning Disabled")
            for each player do
               current_player.set_co_op_spawning(false)
            end
         end
         if global.number[4] == 1 then 
            game.show_message_to(all_players, timer_beep, "Bro-Spawning Enabled")
            for each player do
               current_player.set_co_op_spawning(true)
            end
         end
      end
      if global.object[5].object[1] == killed_object then 
         killer_player.number[0] *= -1
         if killer_player.number[0] == -1 then 
            game.show_message_to(killer_player, none, "Invincibility Disabled")
         end
         if killer_player.number[0] == 1 then 
            game.show_message_to(killer_player, none, "Invincibility Enabled")
            send_incident(30_in_a_row, killer_player, no_player)
         end
         if killer_player.team == team[6] or killer_player.team == team[7] then 
            game.show_message_to(killer_player, none, "You are on an invincible team!")
         end
      end
      if global.object[5].object[3] == killed_object then 
         global.number[7] *= -1
         if global.number[7] == 1 then 
            game.show_message_to(all_players, none, "Beware! Some attachments may quickly despawn!")
            game.show_message_to(all_players, timer_beep, "All attachments have been detached from their attach_base objects")
         end
         if global.number[7] == -1 then 
            game.show_message_to(all_players, timer_beep, "Attachments have been reattached to their attach_base objects")
         end
      end
      if global.object[5].object[2] == killed_object then 
         global.number[6] *= -1
         if global.number[6] == 1 then 
            game.show_message_to(all_players, announce_race, "Race enabled! Players will spawn in mongooses!")
         end
         if global.number[6] == -1 then 
            game.show_message_to(all_players, timer_beep, "Race disabled! Players will no longer spawn in mongooses!")
            for each player do
               current_player.object[3].delete()
            end
         end
      end
      if global.object[6] == killed_object then 
         global.object[6].object[0].delete()
         global.object[6].object[1].delete()
         global.number[5] *= -1
         if global.number[5] == -1 then 
            game.show_message_to(all_players, timer_beep, "Scaling disabled for objects under yellow team")
            game.show_message_to(all_players, none, "Scaling Enabled")
         end
         if global.number[5] == 1 then 
            game.show_message_to(all_players, timer_beep, "Scaling enabled for objects under yellow team")
            game.show_message_to(all_players, none, "Scaling Disabled")
         end
      end
      if global.object[6].object[0] == killed_object then 
         global.number[8] *= -1
         if global.number[8] == 1 then 
            game.show_message_to(all_players, timer_beep, "Object-by-index objects under red team have been reattached!")
            game.show_message_to(all_players, none, "Other objects unaffected")
         end
         if global.number[8] == -1 then 
            game.show_message_to(all_players, timer_beep, "Object-by-index objects under red team have been detached!")
         end
      end
      if global.object[6].object[1] == killed_object then 
         global.number[10] *= -1
         if global.number[10] == 1 then 
            game.show_message_to(all_players, timer_beep, "Shadow casters disabled. Objects can be moved!")
         end
         if global.number[10] == -1 then 
            game.show_message_to(all_players, timer_beep, "Shadow casters enabled. Objects can no longer be moved!")
         end
      end
      if global.object[8].object[1] == killed_object then 
         global.object[3].number[6] += 1
         if global.object[3].number[6] == 2 then 
            global.object[3].number[6] = -1
            game.show_message_to(all_players, timer_beep, "Rabid MM's 71x Scaling is active!")
         end
         if global.object[3].number[6] == 1 then 
            game.show_message_to(all_players, timer_beep, "Legacy 33x Scaling (Trusty's Scaling) is active!")
         end
         if global.object[3].number[6] == 0 then 
            game.show_message_to(all_players, timer_beep, "Refined 47x Scaling (Anvil Scaling) is active!")
         end
         for each object with label "scale" do
            if current_object.object[0] != no_object and current_object.timer[3] == 1 then 
               current_object.detach()
               current_object.object[0].attach_to(current_object, 0, 0, 0, relative)
               current_object.timer[3].set_rate(-200%)
            end
         end
      end
   end
   if killed_object.is_of_type(spartan) and killed_object.has_forge_label("toolbarlabel") then 
      killed_object.delete()
   end
   if killer_player.biped == killed_object then 
      game.show_message_to(all_players, none, "Enable scripts by destroying a UNSC machine gun turret")
      game.show_message_to(all_players, none, "Disable scripts by destroying a plasma cannon")
   end
   for each object with label "object_by_index" do
      global.number[0] = current_object.spawn_sequence
      global.number[0] += 100
      global.object[14] = no_object
      global.number[1] = 0
      for each object do
         if not current_object.has_forge_label("toolbarlabel") and not current_object.has_forge_label("spawner") and not current_object.is_of_type(monitor) and not current_object.is_of_type(flag_stand) and not current_object.is_of_type(kill_ball) and not current_object.is_of_type(elite) and not current_object.is_of_type(spartan) and not current_object.is_of_type(landmine) and not current_object.is_of_type(hill_marker) and not current_object.is_of_type(capture_plate) then 
            if global.number[1] == global.number[0] then 
               global.object[14] = current_object
            end
            global.number[1] += 1
         end
      end
      if current_object.spawn_sequence != 0 then 
         if current_object.number[1] != current_object.spawn_sequence then 
            global.object[14].copy_rotation_from(current_object, true)
            global.object[14].attach_to(current_object, 0, 0, 0, relative)
            current_object.number[1] = current_object.spawn_sequence
         end
         if current_object.team == team[0] then 
            if global.number[8] == -1 then 
               global.object[14].detach()
            end
            if global.number[8] == 1 then 
               global.object[14].copy_rotation_from(current_object, true)
               global.object[14].attach_to(current_object, 0, 0, 0, relative)
            end
         end
         if current_object.team != team[0] then 
            global.object[14].copy_rotation_from(current_object, true)
            global.object[14].attach_to(current_object, 0, 0, 0, relative)
         end
      end
   end
   for each object with label "spawner" do
      current_object.number[5] = 9997
      if current_object.object[0] == no_object then 
         if current_object.spawn_sequence == 1 then 
            current_object.object[0] = current_object.place_at_me(bomb, none, never_garbage_collect, 0, 0, 0, none)
         end
         if current_object.spawn_sequence == 2 then 
            current_object.object[0] = current_object.place_at_me(covenant_bomb, none, never_garbage_collect, 0, 0, 0, none)
         end
         if current_object.spawn_sequence == 3 then 
            current_object.object[0] = current_object.place_at_me(flag, none, never_garbage_collect, 0, 0, 0, none)
         end
         if current_object.spawn_sequence == 4 then 
            current_object.object[0] = current_object.place_at_me(skull, none, never_garbage_collect, 0, 0, 0, none)
         end
         if current_object.spawn_sequence == 5 then 
            current_object.object[0] = current_object.place_at_me(unsc_data_core, none, never_garbage_collect, 0, 0, 0, none)
         end
         if current_object.spawn_sequence == 6 then 
            current_object.object[0] = current_object.place_at_me(covenant_power_core, none, never_garbage_collect, 0, 0, 0, none)
         end
         if current_object.spawn_sequence == 7 then 
            current_object.object[0] = current_object.place_at_me(spartan, none, never_garbage_collect, 0, 0, 0, player_skull)
         end
         if current_object.spawn_sequence == 8 then 
            current_object.object[0] = current_object.place_at_me(elite, none, never_garbage_collect, 0, 0, 0, jetpack)
         end
         if current_object.spawn_sequence == 9 then 
            current_object.object[0] = current_object.place_at_me(pelican_scenery, none, never_garbage_collect, 0, 0, 0, none)
            current_object.object[0].attach_to(current_object, 0, 0, 0, relative)
            current_object.object[0].detach()
         end
         if current_object.spawn_sequence == 10 then 
            current_object.object[0] = current_object.place_at_me(phantom_scenery, none, never_garbage_collect, 0, 0, 0, none)
            current_object.object[0].attach_to(current_object, 0, 0, 0, relative)
            current_object.object[0].detach()
         end
         if current_object.spawn_sequence == 11 then 
            current_object.object[0] = current_object.place_at_me(warthog_turret, none, never_garbage_collect, 0, 0, 0, none)
         end
         if current_object.spawn_sequence == 12 then 
            current_object.object[0] = current_object.place_at_me(warthog_turret_gauss, none, never_garbage_collect, 0, 0, 0, none)
            if current_object.team == team[1] and current_object.object[1] == no_object then 
               current_object.object[1] = current_object.place_at_me(flag_stand, none, never_garbage_collect, 0, 0, 0, none)
               current_object.object[2] = current_object.place_at_me(shade, none, never_garbage_collect, 0, 0, 0, none)
               current_object.object[2].set_shape(cylinder, 10, 10, 0)
               global.object[13] = current_object.object[2]
               for each object do
                  if global.object[13].shape_contains(current_object) and current_object.is_of_type(shade_gun_plasma) then 
                     current_object.delete()
                  end
               end
               current_object.object[2].set_scale(30)
               current_object.object[1].set_scale(1)
               current_object.object[2].attach_to(current_object.object[0], 0, 0, 0, relative)
               current_object.object[2].detach()
               current_object.object[1].attach_to(current_object.object[2], 0, 0, 0, relative)
               current_object.object[0].attach_to(current_object.object[1], 0, 0, 0, relative)
            end
         end
         if current_object.spawn_sequence == 13 then 
            current_object.object[0] = current_object.place_at_me(warthog_turret_rocket, none, never_garbage_collect, 0, 0, 0, none)
         end
         if current_object.spawn_sequence == 14 then 
            current_object.object[0] = current_object.place_at_me(phantom, none, never_garbage_collect, 0, 0, 0, none)
            current_object.object[0].attach_to(current_object, 0, 0, 0, relative)
         end
         if current_object.spawn_sequence == 15 then 
            current_object.object[0] = current_object.place_at_me(longsword, none, never_garbage_collect, 0, 0, 0, none)
         end
         if current_object.spawn_sequence == 16 then 
            current_object.object[0] = current_object.place_at_me(covenant_power_module_stand, none, never_garbage_collect, 0, 0, 0, none)
         end
         if current_object.spawn_sequence == 17 then 
            current_object.object[0] = current_object.place_at_me(unsc_data_core_holder, none, never_garbage_collect, 0, 0, 0, none)
         end
         if current_object.spawn_sequence == 18 then 
            current_object.object[0] = current_object.place_at_me(resupply_capsule, none, never_garbage_collect, 0, 0, 0, none)
         end
         if current_object.spawn_sequence == -1 then 
            current_object.set_waypoint_icon(diamond)
            current_object.set_waypoint_visibility(everyone)
            for each player do
               if current_player.team == current_object.team or current_object.team == neutral_team then 
                  current_object.number[1] = current_object.get_distance_to(current_player.biped)
                  current_object.set_waypoint_text("Distance %n", hud_target_object.number[1])
               end
            end
         end
         if current_object.spawn_sequence == -2 then 
            current_object.set_shape_visibility(everyone)
            current_object.set_waypoint_visibility(everyone)
            current_object.set_waypoint_text("Deletion Zone")
            global.object[0] = no_object
            global.object[0] = current_object
            for each object do
               if global.object[0].shape_contains(current_object) and global.object[0] != current_object and not current_object.is_of_type(monitor) then 
                  current_object.delete()
               end
            end
         end
         if current_object.spawn_sequence == -3 then 
            current_object.set_waypoint_visibility(everyone)
            if current_object.team == neutral_team then 
               current_object.set_waypoint_text("Interpolator")
            end
            if current_object.team == team[0] then 
               set_scenario_interpolator_state(1, 0)
               current_object.set_waypoint_text("State 1 off")
            end
            if current_object.team == team[1] then 
               set_scenario_interpolator_state(1, 1)
               current_object.set_waypoint_text("State 1 on")
            end
            if current_object.team == team[2] then 
               set_scenario_interpolator_state(2, 0)
               current_object.set_waypoint_text("State 2 off")
            end
            if current_object.team == team[3] then 
               set_scenario_interpolator_state(2, 1)
               current_object.set_waypoint_text("State 2 on")
            end
            if current_object.team == team[4] then 
               set_scenario_interpolator_state(3, 0)
               current_object.set_waypoint_text("State 3 off")
            end
            if current_object.team == team[5] then 
               set_scenario_interpolator_state(3, 1)
               current_object.set_waypoint_text("State 3 on")
            end
            if current_object.team == team[6] then 
               set_scenario_interpolator_state(4, 0)
               current_object.set_waypoint_text("State 4 off")
            end
            if current_object.team == team[7] then 
               set_scenario_interpolator_state(4, 1)
               current_object.set_waypoint_text("State 4 on")
            end
         end
         if current_object.spawn_sequence == -4 then 
            current_object.set_waypoint_visibility(everyone)
            if current_object.team == neutral_team then 
               current_object.set_waypoint_text("Interpolator 2")
            end
            if current_object.team == team[0] then 
               set_scenario_interpolator_state(5, 0)
               current_object.set_waypoint_text("State 5 off")
            end
            if current_object.team == team[1] then 
               set_scenario_interpolator_state(5, 1)
               current_object.set_waypoint_text("State 5 on")
            end
            if current_object.team == team[2] then 
               set_scenario_interpolator_state(6, 0)
               current_object.set_waypoint_text("State 6 off")
            end
            if current_object.team == team[3] then 
               set_scenario_interpolator_state(6, 1)
               current_object.set_waypoint_text("State 6 on")
            end
            if current_object.team == team[4] then 
               set_scenario_interpolator_state(7, 0)
               current_object.set_waypoint_text("State 7 off")
            end
            if current_object.team == team[5] then 
               set_scenario_interpolator_state(7, 1)
               current_object.set_waypoint_text("State 7 on")
            end
            if current_object.team == team[6] then 
               set_scenario_interpolator_state(8, 0)
               current_object.set_waypoint_text("State 8 off")
            end
            if current_object.team == team[7] then 
               set_scenario_interpolator_state(8, 1)
               current_object.set_waypoint_text("State 8 on")
            end
         end
         current_object.object[0].copy_rotation_from(current_object, true)
         if current_object.team == team[0] and current_object.spawn_sequence != -5 then 
            current_object.object[0].attach_to(current_object, 0, 0, 0, relative)
         end
      end
      if current_object.spawn_sequence == -6 or current_object.spawn_sequence == -7 and current_object.number[4] != 1 then 
         global.object[10] = no_object
         global.object[10] = current_object
         for each object do
            global.number[3] = current_object.get_distance_to(global.object[10])
            if global.number[3] == 0 and global.object[10] != current_object then 
               if global.object[10].spawn_sequence == -7 then 
                  current_object.delete()
               end
               if global.object[10].spawn_sequence == -6 then 
                  current_object.attach_to(global.object[10], 0, 0, 0, relative)
               end
               global.object[10].number[4] = 1
            end
         end
      end
      if current_object.team == team[0] then 
         current_object.object[0].attach_to(current_object, 0, 0, 0, relative)
         current_object.number[4] = 59
      end
      if current_object.team != team[0] and current_object.number[1] == 59 then 
         current_object.object[0].detach()
         current_object.number[4] = 0
      end
      if current_object.number[0] != current_object.spawn_sequence then 
         current_object.detach()
         current_object.object[0].delete()
         current_object.object[1].delete()
         current_object.object[2].delete()
         current_object.set_waypoint_visibility(no_one)
         current_object.set_waypoint_icon(none)
      end
      current_object.number[0] = current_object.spawn_sequence
   end
   for each player do
      if current_player.number[3] == 3 then 
         if current_player.biped == killed_object then 
            global.number[11] -= 1
            current_player.number[3] = 0
         end
         if current_player.biped == no_object then 
            global.number[11] -= 1
            current_player.number[3] = 0
         end
      end
      if not current_player.biped.is_of_type(monitor) and current_player.object[3] == no_object and global.number[6] != 0 and global.number[6] == 1 then 
         current_player.object[3] = current_player.biped.place_at_me(mongoose, none, none, 0, 0, 0, none)
         if current_player.number[0] == 1 or current_player.team == team[7] or current_player.team == team[6] then 
            global.object[11] = current_player.object[3]
            global.object[11].team = team[7]
         end
         current_player.force_into_vehicle(current_player.object[3])
      end
      if current_player.biped.is_of_type(monitor) or current_player.biped == no_object and global.number[6] == 1 then 
         current_player.object[3].delete()
      end
      if current_player.team == team[6] or current_player.team == team[7] or current_player.number[0] == 1 then 
         current_player.biped.set_invincibility(1)
      end
      if current_player.team != team[6] and current_player.team != team[7] and current_player.number[0] == -1 then 
         current_player.biped.set_invincibility(0)
      end
   end
   for each object do
      if not current_object.has_forge_label("spawner") and current_object.number[5] == 9997 then 
         current_object.detach()
         current_object.object[0].delete()
         current_object.object[1].delete()
         current_object.object[2].delete()
         current_object.number[5] = 0
         current_object.set_waypoint_visibility(no_one)
         current_object.set_waypoint_icon(none)
      end
      if not current_object.has_forge_label("scale") and current_object.number[5] == 9960 then 
         current_object.set_scale(100)
         current_object.number[1] = 0
         current_object.number[5] = 0
      end
      if current_object.is_of_type(spartan) and current_object.has_forge_label("toolbarlabel") then 
         for each object do
            if current_object.is_of_type(frag_grenade) then 
               current_object.number[0] = current_object.get_distance_to(current_object)
               if current_object.number[0] < 15 then 
                  current_object.delete()
               end
            end
         end
      end
   end
   if killed_object.is_of_type(plasma_cannon) then 
      global.object[12].delete()
      global.object[3].object[2].delete()
      global.object[3].object[0].delete()
      global.object[3].object[3].delete()
      global.object[3].object[0].delete()
      global.object[3].object[3].delete()
      global.object[3].delete()
      game.show_message_to(all_players, none, "Enable scripts by destroying a UNSC machine gun turret")
      game.show_message_to(all_players, boneyard_generator_power_down, "Scripts disabled")
      for each object with label "scale" do
         current_object.set_scale(100)
         current_object.copy_rotation_from(current_object, false)
      end
      for each player do
         if current_player.number[3] == 3 and current_player.biped == current_player.object[1] then 
            current_player.set_biped(current_player.object[0])
            current_player.number[3] = 0
            current_player.object[1].delete()
            global.object[5].number[2] = -1
            global.object[5].object[0].delete()
            global.object[5].object[1].delete()
            global.object[5].object[2].delete()
            global.object[5].object[3].delete()
            global.object[5].delete()
            global.object[6].object[0].delete()
            global.object[6].object[1].delete()
            global.object[6].delete()
            global.object[7].object[3].delete()
            global.object[7].object[2].delete()
            global.object[7].object[1].delete()
            global.object[7].object[0].delete()
            global.object[7].delete()
            global.object[8].object[1].delete()
            global.object[8].object[0].delete()
            global.object[8].delete()
            global.number[11] = 0
         end
         if current_player.number[3] == 2 then 
            current_player.number[3] = 1
         end
      end
   end
end
